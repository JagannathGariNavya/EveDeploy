import { AllEvents, BaseEventPayload, CleanupFn, DropTargetEventPayloadMap, EventPayloadMap, Input, InternalDragType, MonitorCanMonitorArgs } from '../internal-types';
declare type ElementDragType = InternalDragType<'element', 'move', {
    element: HTMLElement;
    dragHandle: Element | null;
    data: Record<string, unknown>;
}>;
declare type GetFeedbackArgs = {
    /**
     * The user input as a drag is trying to start (the `initial` input)
     */
    input: Input;
    /**
     * The `draggable` element
     */
    element: HTMLElement;
    /**
     * The `dragHandle` element for the `draggable`
     */
    dragHandle: Element | null;
};
declare type DraggableArgs = {
    /** The `HTMLElement` that you want to attach draggable behaviour to.
     * `element` is our unique _key_ for a draggable.
     * `element` is a `HTMLElement` as only a `HTMLElement`
     * can have a "draggable" attribute
     */
    element: HTMLElement;
    /** The part of a draggable `element` that you want to use to control the dragging of the whole `element` */
    dragHandle?: Element;
    /** Conditionally allow a drag to occur */
    canDrag?: (args: GetFeedbackArgs) => boolean;
    /** Used to attach data to a drag operation. Called once just before the drag starts */
    getInitialData?: (args: GetFeedbackArgs) => Record<string, unknown>;
} & Partial<AllEvents<ElementDragType>>;
export declare const dropTargetForElements: (args: import("../internal-types").DropTargetArgs<ElementDragType>) => CleanupFn;
export declare const monitorForElements: (args: import("../internal-types").MonitorArgs<ElementDragType>) => CleanupFn;
export declare function draggable(args: DraggableArgs): CleanupFn;
export declare type ElementEventBasePayload = BaseEventPayload<ElementDragType>;
export declare type ElementEventPayloadMap = EventPayloadMap<ElementDragType>;
export declare type ElementDropTargetEventPayloadMap = DropTargetEventPayloadMap<ElementDragType>;
export declare type ElementMonitorCanMonitorArgs = MonitorCanMonitorArgs<ElementDragType>;
export {};
