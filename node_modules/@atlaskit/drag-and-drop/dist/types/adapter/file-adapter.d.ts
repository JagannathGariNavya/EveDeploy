import { BaseEventPayload, CleanupFn, DropTargetEventPayloadMap, EventPayloadMap, ExternalDragType, MonitorCanMonitorArgs } from '../internal-types';
declare type FileDragType = ExternalDragType<'file', 'copy', {
    items: DataTransfer['items'] | null;
}>;
declare const adapter: {
    registerUsage: () => CleanupFn;
    dropTarget: (args: import("../internal-types").DropTargetArgs<FileDragType>) => CleanupFn;
    monitor: (args: import("../internal-types").MonitorArgs<FileDragType>) => CleanupFn;
};
declare type StripEventsForDropTargets<T> = Omit<T, 'onDragStart' | 'onGenerateDragPreview'>;
declare type StripPreviewEvent<T> = Omit<T, 'onGenerateDragPreview'>;
export declare const dropTargetForFiles: (args: StripEventsForDropTargets<Parameters<typeof adapter.dropTarget>[0]>) => CleanupFn;
export declare const monitorForFiles: (args: StripPreviewEvent<Parameters<typeof adapter.monitor>[0]>) => CleanupFn;
export declare type FileDropTargetEventPayloadMap = StripEventsForDropTargets<DropTargetEventPayloadMap<FileDragType>>;
export declare type FileEventPayloadMap = StripPreviewEvent<EventPayloadMap<FileDragType>>;
export declare type FileEventBasePayload = BaseEventPayload<FileDragType>;
export declare type FileMonitorCanMonitorArgs = MonitorCanMonitorArgs<FileDragType>;
export {};
