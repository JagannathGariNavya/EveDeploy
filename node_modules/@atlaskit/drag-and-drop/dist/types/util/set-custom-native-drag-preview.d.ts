import { ElementEventPayloadMap } from '../adapter/element-adapter';
/** A function to remove the element that has been added to the `container`.
 * @example () => ReactDOM.unmountComponentAtNode(container)
 */
declare type CleanupFn = () => void;
/** A function that will render a preview element into a `container` `HTMLElement` */
declare type RenderFn = ({ container, }: {
    /** The `HTMLElement` that you need to render your preview element into.
    `container` will be appended to the `document.body` and will be removed
    after your `CleanupFn` is called
    */
    container: HTMLElement;
}) => CleanupFn | void;
/** Any valid CSS string value
 * @example `calc(var(--grid) * 2)
 */
declare type CSSValue = string;
/**
 * Where to place the custom drag preview
 *
 * `type: 'center'`: Place the center of the drag preview user the users pointer
 *
 * `type: 'offset-from-pointer'`: Shift the drag preview away from the users pointer
 */
declare type Placement = {
    type: 'center';
} | {
    type: 'offset-from-pointer';
    x: CSSValue;
    y: CSSValue;
};
/** This function provides the ability to mount an element for it to be used as the native drag preview
 *
 * @example
 * draggable({
 *  onGenerateDragPreview: ({ nativeSetDragImage }) => {
 *    setCustomNativeDragPreview({
 *      render: ({ container }) => {
 *        ReactDOM.render(<Preview item={item} />, container);
 *        return () => ReactDOM.unmountComponentAtNode(container);
 *      },
 *      nativeSetDragImage,
 *    });
 *    },
 * });
 */
export declare function setCustomNativeDragPreview({ render, nativeSetDragImage, placement, }: {
    placement?: Placement;
    render: RenderFn;
    nativeSetDragImage: ElementEventPayloadMap['onGenerateDragPreview']['nativeSetDragImage'];
}): void;
export {};
