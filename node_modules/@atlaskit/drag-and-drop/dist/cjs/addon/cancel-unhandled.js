"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancelUnhandled = void 0;
var _bindEventListener = require("bind-event-listener");
function cancel(event) {
  // if `@atlaskit/drag-and-drop` has already prevented the event
  // we don't need to do anything
  if (event.defaultPrevented) {
    return;
  }
  // Using "move" as the drop effect as that uses the standard
  // cursor. Doing this so the user doesn't think they are dropping
  // on the page
  // Note: using "none" will not allow a drop to occur, so we are using "move"
  if (event.dataTransfer) {
    event.dataTransfer.dropEffect = 'move';
  }
  // cancel the default browser behaviour
  // doing this will tell the browser that we have handled the drop
  event.preventDefault();
}
var unbindEvents = null;
/**
 * Block drag operations outside of `@atlaskit/drag-and-drop`
 */
var cancelUnhandled = {
  start: function start() {
    var _unbindEvents;
    (_unbindEvents = unbindEvents) === null || _unbindEvents === void 0 ? void 0 : _unbindEvents();
    unbindEvents = (0, _bindEventListener.bindAll)(window, [{
      type: 'dragover',
      listener: cancel
    }, {
      type: 'dragenter',
      listener: cancel
    }, {
      type: 'drop',
      listener: cancel
    }]);
  },
  stop: function stop() {
    var _unbindEvents2;
    (_unbindEvents2 = unbindEvents) === null || _unbindEvents2 === void 0 ? void 0 : _unbindEvents2();
    unbindEvents = null;
  }
};
exports.cancelUnhandled = cancelUnhandled;