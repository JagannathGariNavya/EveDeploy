"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropTargetForCrossWindowElements = void 0;
exports.extractCrossWindowResult = extractCrossWindowResult;
exports.monitorForCrossWindowElements = void 0;
exports.setCrossWindowData = setCrossWindowData;
var _bindEventListener = require("bind-event-listener");
var _makeAdapter = require("../make-adapter/make-adapter");
var _combine = require("../util/combine");
var _enteringAndLeavingTheWindow = require("../util/entering-and-leaving-the-window");
var storage = function () {
  var dataKey = 'private-pdnd-data';
  var resultKey = 'private-pdnd-result';
  function tryParse(raw) {
    if (raw == null) {
      return null;
    }
    try {
      return JSON.parse(raw);
    } catch (e) {
      // failed to parse
      return null;
    }
  }
  function setData(data) {
    // clearing a result when we set data
    clearStorage();
    localStorage.setItem(dataKey, JSON.stringify(data));
  }
  function findData() {
    return tryParse(localStorage.getItem(dataKey));
  }
  function setResult(result) {
    localStorage.setItem(resultKey, result);
  }
  function findResult() {
    var raw = localStorage.getItem(resultKey);
    if (raw == null) {
      return null;
    }

    // TODO: improve type
    return raw;
  }
  function clearStorage() {
    localStorage.removeItem(dataKey);
    localStorage.removeItem(resultKey);
  }
  return {
    clearStorage: clearStorage,
    setData: setData,
    findData: findData,
    setResult: setResult,
    findResult: findResult
  };
}();
var adapter = (0, _makeAdapter.makeAdapter)({
  typeKey: 'experimental-cross-window-element',
  defaultDropEffect: 'move',
  mount: function mount(api) {
    return (0, _combine.combine)((0, _bindEventListener.bindAll)(window, [{
      type: 'dragenter',
      listener: function listener(event) {
        if (!api.canStart(event)) {
          return;
        }

        // already cancelled by something else
        if (event.defaultPrevented) {
          return;
        }
        if (!(0, _enteringAndLeavingTheWindow.isEnteringWindow)({
          dragEnter: event
        })) {
          return;
        }

        // we only care about when the window is being first entered
        if (event.relatedTarget != null) {
          return null;
        }
        var data = storage.findData();
        if (data == null) {
          return;
        }
        var dragInterface = {
          key: 'experimental-cross-window-element',
          startedFrom: 'external',
          payload: {
            data: data
          }
        };
        api.start({
          event: event,
          dragInterface: dragInterface
        });
      }
    },
    // always clear a external drag result from another window before a drag starts
    {
      type: 'dragstart',
      listener: storage.clearStorage,
      options: {
        capture: true
      }
    }]), adapter.monitor({
      onDrop: function onDrop(payload) {
        var result = payload.location.current.dropTargets.length > 0 ? 'moved' : 'none';
        storage.setResult(result);
      }
    }));
  }
});
function setCrossWindowData(_ref) {
  var data = _ref.data;
  storage.setData(data);
}
function extractCrossWindowResult() {
  return storage.findResult();
}
var dropTargetForCrossWindowElements = function dropTargetForCrossWindowElements(args) {
  return (0, _combine.combine)(
  // at least one drop target required before we will start listening for cross element dragging
  adapter.registerUsage(), adapter.dropTarget(args));
};
exports.dropTargetForCrossWindowElements = dropTargetForCrossWindowElements;
var monitorForCrossWindowElements = adapter.monitor;
exports.monitorForCrossWindowElements = monitorForCrossWindowElements;