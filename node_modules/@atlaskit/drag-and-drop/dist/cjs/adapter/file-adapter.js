"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monitorForFiles = exports.dropTargetForFiles = void 0;
var _bindEventListener = require("bind-event-listener");
var _makeAdapter = require("../make-adapter/make-adapter");
var _combine = require("../util/combine");
var _enteringAndLeavingTheWindow = require("../util/entering-and-leaving-the-window");
function getFileItems(event) {
  if (event.dataTransfer == null) {
    return null;
  }
  // filtering out anything that is not a file
  var items = event.dataTransfer.items;
  for (var i = 0; i < items.length; i++) {
    var item = items[i];
    if (item.kind !== 'file') {
      items.remove(i);
    }
  }
  return items;
}
var adapter = (0, _makeAdapter.makeAdapter)({
  typeKey: 'file',
  defaultDropEffect: 'copy',
  mount: function mount(api) {
    return (0, _bindEventListener.bind)(window, {
      type: 'dragenter',
      listener: function listener(event) {
        if (!api.canStart(event)) {
          return;
        }

        // already cancelled by something else
        if (event.defaultPrevented) {
          return;
        }
        if (!(0, _enteringAndLeavingTheWindow.isEnteringWindow)({
          dragEnter: event
        })) {
          return;
        }
        if (event.dataTransfer == null) {
          return;
        }

        // Checking if we are dragging any files
        // This check works in Chrome, Firefox and Chrome
        if (!event.dataTransfer.types.includes('Files')) {
          return null;
        }
        var dragInterface = {
          key: 'file',
          startedFrom: 'external',
          payload: {
            // Not giving `.items` initially as it cannot be safely and consistently
            // accessed across browsers
            // Not giving `.types` as the consumer already knows a file is being dragged
            items: null
          },
          getDropPayload: function getDropPayload(event) {
            return {
              items: getFileItems(event)
            };
          }
        };
        api.start({
          event: event,
          dragInterface: dragInterface
        });
      }
    });
  }
});

// Some events don't make sense for external files
//
// onGenerateDragPreview: drag preview is always generated by the browser
// type WithoutUselessEvents<T> = Omit<T, 'onDragStart' | 'onGenerateDragPreview'>;
//
// onDragStart: an external file can never start from inside a drop target
// (it will always come from outside and we never let a file drag start in a drop target)
// We remove `onDragStart` from drop targets, but monitors can still listen for a start
var dropTargetForFiles = function dropTargetForFiles(args) {
  return (0, _combine.combine)(
  // at least one drop target required before we will start listening for file events
  adapter.registerUsage(),
  // note: not removing unsupported events from args; just leaning on the type system
  adapter.dropTarget(args));
};
exports.dropTargetForFiles = dropTargetForFiles;
var monitorForFiles = function monitorForFiles(args) {
  // note: not removing unsupported events from args; just leaning on the type system
  return adapter.monitor(args);
};
exports.monitorForFiles = monitorForFiles;